//! Interface to the `Message` type generated by protobuf and custom extensions
//! of the auto-generated `List` type.

use proto::message::{List, ListNil, ListCons};

pub mod message;

/// Augmentation of protobuf-generated `List` with common list functionality
/// such as list reversal.
impl List {
    /// Custom list reversal function.
    pub fn from_slice(slice: &[u32]) -> Self {
        let mut l = Self::new();
        match slice.split_first() {
            Some((&h, t)) => {
                let mut c = ListCons::new();
                c.set_head(h);
                c.set_tail(Self::from_slice(t));
                l.set_cons(c);
            }
            None => {
                l.set_nil(ListNil::new());
            }
        }
        return l;
    }

    /// Reverses a list.
    pub fn reverse(&mut self) {
        if let Some(v) = self.into_rev_vec().to_owned() {
            ::std::mem::replace(self, Self::from_slice(v.as_slice()));
        }
    }

    /// Converts a list into a vector with elements placed in the reverse order.
    fn into_rev_vec(&mut self) -> Option<Vec<u32>> {
        if self.has_nil() {
            return None;
        }
        else if self.has_cons() {
            let mut c = self.take_cons();
            let h = c.head;
            let t = c.take_tail().into_rev_vec();
            match t {
                Some(mut v) => {
                    v.push(h);
                    return Some(v);
                },
                None => {
                    return Some(vec![h]);
                }
            }
        }
        None
    }

    /// Converts a list into a vector.
    pub fn into_vec(&mut self) -> Option<Vec<u32>> {
        if let Some(mut v) = self.into_rev_vec() {
            v.reverse();
            return Some(v);
        }
        None
    }
}
